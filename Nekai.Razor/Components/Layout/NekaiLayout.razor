@using Microsoft.FluentUI.AspNetCore.Components.Icons.Filled
@namespace Nekai.Razor

<NekaiDesignTheme @bind-Mode="@_ThemeMode" />
<FluentDialogProvider @rendermode="@InteractiveServer"/>
<FluentTooltipProvider @rendermode="@InteractiveServer" />
<FluentMessageBarProvider @rendermode="@InteractiveServer" />
<FluentToastProvider MaxToastCount="5" Position="ToastPosition.BottomEnd" @rendermode="@InteractiveServer"/>

<FluentMainLayout Class="@Class" Style="@Style" HeaderHeight="@HeaderHeight">
    <Header>
        @if(Title is not null) {
            <FluentLabel Typo="Typography.H1">
                @Title
            </FluentLabel>
        }
        <FluentSpacer />

        @if(HeaderContent is not null)
        {
            <div>
                @HeaderContent
            </div>
        }

        @if(ThemeToggle)
        {
            <FluentButton @rendermode="@InteractiveServer" Appearance="default" OnClick="@_ToggleThemeMode" Name="Theme mode toggle" IconEnd="@_ThemeModeToggleIcon"></FluentButton>
        }
    </Header>

    <NavMenuContent>
        @NavMenu
    </NavMenuContent>

    <Body>
    <div class="m-2" style="min-height: 80vh">
        @Body
    </div>
    </Body>
</FluentMainLayout>

@code {
    /// <summary> The main content for the layout. </summary>
    [Parameter]
    public RenderFragment? Body { get; set; }
    /// <summary> The content of the navigation column. </summary>
    [Parameter]
    public RenderFragment? NavMenu { get; set; }
    /// <summary> The content displayed at the end of the header. </summary>
    [Parameter]
    public RenderFragment? HeaderContent { get; set; }
    /// <summary> The title to display in the header. </summary>
    [Parameter]
    public string? Title { get; set; }
    /// <summary> The height of the header. </summary>
    [Parameter]
    public int? HeaderHeight { get; set; }
    /// <summary> Whether to display a toggle for light/dark mode. </summary>
    [Parameter]
    public bool ThemeToggle { get; set; }
    [Parameter]
    public string Class { get; set; } = "";
    [Parameter]
    public string Style { get; set; } = "";

    private DesignThemeModes _ThemeMode { get; set; }
    private Icon _ThemeModeToggleIcon => _ThemeMode switch
    {
        DesignThemeModes.System => new Size24.Laptop(),
        DesignThemeModes.Light => new Size24.WeatherSunny(),
        _ => new Size24.WeatherMoon()
    };

    private void _ToggleThemeMode(MouseEventArgs args)
    {
        _ThemeMode = _ThemeMode switch
        {
            DesignThemeModes.System => DesignThemeModes.Light,
            DesignThemeModes.Light => DesignThemeModes.Dark,
            _ => DesignThemeModes.System
        };
    }
}
