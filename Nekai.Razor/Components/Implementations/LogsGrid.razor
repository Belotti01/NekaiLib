@namespace Nekai.Razor
@using Microsoft.Extensions.Logging
@using Nekai.Common


<FluentTabs>
	@foreach(var entry in _Logs) {
		<FluentTab Label="@entry.Key">
			<FluentDataGrid TGridItem="NekaiLog" Items="@entry.Value.AsQueryable()" ResizableColumns Pagination="@_Paginations[@entry.Key]">
				<PropertyColumn Title="Machine" Width="10vw" Property="(x) => x.MachineName" />
				<PropertyColumn IsDefaultSortColumn InitialSortDirection="SortDirection.Descending" Title="Timestamp" Width="10vw" Property="(x) => x.TimeStamp" Sortable="true" Format="yyyy/MM/dd hh:mm:ss" />
				<TemplateColumn Title="Level" Width="5vw">
					<p style="@_GetLevelColumnStyle(context.Type)">
						@context.TypeString
					</p>
				</TemplateColumn>
				<PropertyColumn Property="(x) => x.Message" />
				
			</FluentDataGrid>
			<FluentPaginator State="@_Paginations[@entry.Key]"/>
		</FluentTab>
	}
</FluentTabs>

@code {
	[Parameter]
	public bool OmitSharedLogs { get; set; }
	[Parameter]
	public bool OmitProgramLogs { get; set; }

	private Dictionary<string, IEnumerable<NekaiLog>> _Logs { get; set; } = [];
	private Dictionary<string, PaginationState> _Paginations { get; set; } = [];

	protected override void OnInitialized()
	{
		_LoadLogs();
	}

	private void _LoadLogs()
	{
		_Logs = [];

		if (!OmitSharedLogs)
		{
			_Logs.Add("Shared", NekaiLogs.DeserializeAll(NekaiData.Directories.SharedLogs));
			_Paginations.Add("Shared", new PaginationState() { ItemsPerPage = 25 });
		}

		if (OmitProgramLogs)
			return;

		var directories = NekaiData.Directories.ProgramsLogs.EnumerateDirectories();

		foreach (string directory in directories)
		{
			var dirPath = (PathString?)directory;
			if (dirPath is null)
				continue;

			try
			{
				var logs = NekaiLogs.DeserializeAll(dirPath);
				if(logs.Count == 0)
					continue;
				var name = dirPath.GetFileOrDirectoryName().ToString();
				_Paginations.Add(name, new PaginationState() { ItemsPerPage = 25 });
				_Logs.Add(name, logs);
			}catch(ArgumentException)
			{
				NekaiLogs.Shared.Error($"Duplicate directory entry found when filling LogsGrid: '{dirPath}'");
			}
		}
	}

	private string _GetLevelColumnStyle(LogLevel level)
		=> level switch
		{
			LogLevel.Critical => "color: red",
			LogLevel.Error => "color: red",
			LogLevel.Warning => "color: yellow",
			LogLevel.Information => "color: blue",
			_ => ""
		};
}