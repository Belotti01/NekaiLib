@namespace Nekai.Razor
@using Nekai.Common
@using Nekai.Common.Reflection

<FluentEditForm Model="_config">
    <FluentValidationSummary Model="context"/>
    
    <FluentTabs>
        <FluentTab Label="General">
            <FluentCard>
                <NekaiColumn VerticalGap="2">
                    <FluentCombobox Label="Default Language:" TOption="@DisplayLanguage" @bind-SelectedOption="@_config.DefaultLanguage" Items="@(Enum.GetValues<DisplayLanguage>().Select(x => x))"/>
                    <FluentCheckbox Label="Prefer Dark Mode:" @bind-Value="@_config.PreferDarkMode"/>
                </NekaiColumn>
            </FluentCard>
        </FluentTab>

        <FluentTab Label="SMTP">
            <FluentCard>
                <NekaiColumn VerticalGap="2">
                    <FluentTextField Label="SMTP Server:" @bind-Value="@_config.Smtp.Url" TextFieldType="TextFieldType.Url"/>
                    <FluentNumberField Label="Port:" @bind-Value="@_config.Smtp.Port"/>
                    <FluentCheckbox Label="Use SSL" @bind-Value="@_config.Smtp.UseSsl"/>
                    <FluentCheckbox Label="Use Default Credentials" @bind-Value="@_config.Smtp.UseDefaultCredentials"/>
                </NekaiColumn>
            </FluentCard>
        </FluentTab>
    </FluentTabs>

    <FluentButton OnClick="_SaveChanges">Save</FluentButton>
    <p>@_resultMessage</p>
</FluentEditForm>

@code {
    private string? _resultMessage;
    private NekaiGeneralConfiguration _config;

    public NekaiSettingsForm()
    : base()
    {
        NekaiApp.Configuration.TrySerialize();
        var result = NekaiGeneralConfiguration.TryDeserialize(NekaiApp.Configuration.FilePath!);
        if(!result.IsSuccessful)
        {
            _resultMessage = "An error occurred loading the configuration.";
            _config = new();    // Avoid page crash.
            return;
        }
        
        _config = result.Value;
    }

    private async Task _SaveChanges()
    {
        _config.CopyMembersInto(NekaiApp.Configuration);
        var result = NekaiApp.Configuration.TrySerialize();

        _resultMessage = result.IsSuccessful()
            ? "Changes saved successfully."
            : result.GetMessage();

        await InvokeAsync(StateHasChanged);
    }
}