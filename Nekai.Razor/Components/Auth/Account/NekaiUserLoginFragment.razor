@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@namespace Nekai.Razor

@typeparam TUser where TUser : NekaiUser

@inject SignInManager<TUser> _SignInManager
@inject ILogger<NekaiUserLoginFragment<TUser>> _Logger
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager

<p class="text-danger">@_errorMessage</p>
<FluentEditForm Model="_Input" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />
    <FluentValidationSummary class="text-danger" role="alert"/>
    
    <FluentStack Orientation="Orientation.Vertical" Width="100%">
        <FluentTextField Name="Email" @bind-Value="@Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%"/>
        <FluentValidationMessage For="() => _Input.Email" class="text-danger"/>
        
        <FluentTextField type="password" Name="Password" @bind-Value="@_Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%"/>
        <FluentValidationMessage For="() => _Input.Password" class="text-danger"/>
        
        <FluentCheckbox Name="RememberMe" @bind-Value="@_Input.RememberMe" Label="Remember me"/>
        
        <FluentButton Loading="@_loggingIn" Method="post" Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
        
    </FluentStack>
</FluentEditForm>

@code {
    private bool _loggingIn;
    private string? _errorMessage;

    [Parameter]
    public string Email
    {
        get => _Input.Email;
        set => _Input.Email = value;
    }
    [Parameter]
    public bool Is2FaRequested { get; set; }
    [Parameter]
    public bool IsLockedOut { get; set; }
    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }
    [Parameter]
    public EventCallback<bool> Is2FaRequestedChanged { get; set; }
    [Parameter]
    public EventCallback<bool> IsLockedOutChanged { get; set; }
    
    [Parameter]
    public bool LockOutOnInvalidLogin { get; set; }
    [CascadingParameter]
    private HttpContext? _HttpContext { get; set; }
    [SupplyParameterFromForm]
    private InputModel _Input { get; set; } = new();
    [SupplyParameterFromQuery, Parameter]
    public string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(_HttpContext is not null && HttpMethods.IsGet(_HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await _HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if(_loggingIn)
            return;

        _loggingIn = true;
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await _SignInManager.PasswordSignInAsync(_Input.Email, _Input.Password, _Input.RememberMe, lockoutOnFailure: LockOutOnInvalidLogin);
        if(result.Succeeded)
        {
            _Logger.LogInformation("User {user} logged in.", _Input.Email);
            _RedirectManager.RedirectTo(ReturnUrl);
        }
        else if(result.RequiresTwoFactor)
        {
            Is2FaRequested = true;
        }
        else if(result.IsLockedOut)
        {
            _Logger.LogWarning("User account {user} locked out.", _Input.Email);
            _RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
        
        _loggingIn = false;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}