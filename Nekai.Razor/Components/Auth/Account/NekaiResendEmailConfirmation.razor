@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@typeparam TUser where TUser : NekaiUser

@inject UserManager<TUser> _UserManager
@inject IEmailSender<TUser> _EmailSender
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager

<p>@_message</p>

<EditForm Model="_Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <FluentValidationSummary class="text-danger" role="alert"/>
    <FluentTextField Name="Email" @bind-Value="Email" class="form-control" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%;"/>
    <FluentValidationMessage For="() => _Input.Email" class="text-danger"/>
    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">Resend</FluentButton>
</EditForm>

@code {
    private string? _message;

    [SupplyParameterFromForm]
    private InputModel _Input { get; set; } = new();
    [Parameter]
    public string Email
    {
        get => _Input.Email;
        set => _Input.Email = value;
    }
    [Parameter]
    public EventCallback<string> EmailChanged { get; set; }
    
    private async Task OnValidSubmitAsync()
    {
        var user = await _UserManager.FindByEmailAsync(_Input.Email!);
        if(user is null)
        {
            _message = "Verification email sent. Please check your email.";
            return;
        }

        var userId = await _UserManager.GetUserIdAsync(user);
        var code = await _UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = _NavigationManager.GetUriWithQueryParameters(
        _NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?>
        {
            ["userId"] = userId,
            ["code"] = code
        });
        await _EmailSender.SendConfirmationLinkAsync(user, _Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        _message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }

}