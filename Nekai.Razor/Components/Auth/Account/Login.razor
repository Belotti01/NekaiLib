@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Http
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Logging

@inject SignInManager<IdentityUser<Guid>> _SignInManager
@inject ILogger<Login> _Logger
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<FluentGrid>
    <FluentGridItem xs="8" sm="4">
        <StatusMessage Message="@_errorMessage"/>
        <FluentEditForm Model="_Input" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <h2>Use a local account to log in.</h2>
            <hr/>
            <FluentValidationSummary class="text-danger" role="alert"/>
            
            <FluentStack Orientation="Orientation.Vertical">
                <FluentTextField Name="Input.Email" @bind-Value="_Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%"/>
                <FluentValidationMessage For="() => _Input.Email" class="text-danger"/>
                <FluentTextField type="password" Name="Input.Password" @bind-Value="_Input.Password" AutoComplete="current-password" Required="true" Placeholder="password" Label="Password" Style="width: 100%"/>
                <FluentValidationMessage For="() => _Input.Password" class="text-danger"/>
                <FluentCheckbox Name="Input.RememberMe" @bind-Value="_Input.RememberMe" Label="Remember me"/>
                
                <FluentButton Method="post" Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%">Log in</FluentButton>
                <div>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ForgotPassword">Forgot your password?</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="@(_NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = _ReturnUrl }))">Register as a new user</FluentAnchor>
                    </p>
                    <p>
                        <FluentAnchor Appearance="Appearance.Hypertext" Href="Account/ResendEmailConfirmation">Resend email confirmation</FluentAnchor>
                    </p>
                </div>
            </FluentStack>
        </FluentEditForm>
    </FluentGridItem>
    <FluentGridItem xs="12" sm="8">
        <h3>Use another service to log in.</h3>
        <hr/>
        <ExternalLoginPicker/>
    </FluentGridItem>
</FluentGrid>

@code {
    private string? _errorMessage;

    [CascadingParameter]
    private HttpContext _HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel _Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? _ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if(HttpMethods.IsGet(_HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await _HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await _SignInManager.PasswordSignInAsync(_Input.Email, _Input.Password, _Input.RememberMe, lockoutOnFailure: false);
        if(result.Succeeded)
        {
            _Logger.LogInformation("User {user} logged in.", _Input.Email);
            _RedirectManager.RedirectTo(_ReturnUrl);
        }
        else if(result.RequiresTwoFactor)
        {
            _RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new()
                {
                    ["returnUrl"] = _ReturnUrl,
                    ["rememberMe"] = _Input.RememberMe
                }
            );
        }
        else if(result.IsLockedOut)
        {
            _Logger.LogWarning("User account {user} locked out.", _Input.Email);
            _RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}