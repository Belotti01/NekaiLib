@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Serilog

@typeparam TUser where TUser : NekaiUser

@inject SignInManager<TUser> _SignInManager
@inject UserManager<TUser> _UserManager
@inject IdentityRedirectManager _RedirectManager
@inject ILogger _Logger

<StatusMessage Message="@_message"/>
<EditForm Model="_Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
    <input type="hidden" name="ReturnUrl" value="@_ReturnUrl"/>
    <input type="hidden" name="RememberMe" value="@_RememberMe"/>
    <DataAnnotationsValidator/>
    <FluentValidationSummary class="text-danger" role="alert"/>
    
    <FluentTextField Name="Input.TwoFactorCode" @bind-Value="_Input.TwoFactorCode" class="form-control" AutoComplete="off" Label="Authenticator code" Style="width: 100%;"/>
    <FluentValidationMessage For="() => _Input.TwoFactorCode" class="text-danger"/>
    
    <FluentCheckbox Name="Input.RememberMachine" @bind-Value="_Input.RememberMachine" Label="Remember this machine" Style="width: 100%;"/>
    
    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">Log in</FluentButton>
</EditForm>

<p>
    Don't have access to your authenticator device? You can
    <a href="Account/LoginWithRecoveryCode?ReturnUrl=@_ReturnUrl">log in with a recovery code</a>.
</p>

@code {
    private string? _message;
    private TUser _user = default!;

    [SupplyParameterFromForm]
    private InputModel _Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? _ReturnUrl { get; set; }

    [SupplyParameterFromQuery]
    private bool _RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        _user = await _SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = _Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await _SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, _RememberMe, _Input.RememberMachine);
        var userId = await _UserManager.GetUserIdAsync(_user);

        if(result.Succeeded)
        {
            _Logger.Information("User with ID '{UserId}' logged in with 2fa.", userId);
            _RedirectManager.RedirectTo(_ReturnUrl);
        }
        else if(result.IsLockedOut)
        {
            _Logger.Warning("User with ID '{UserId}' account locked out.", userId);
            _RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            _Logger.Warning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            _message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

}