@page "/Account/ForgotPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@typeparam TUser where TUser : NekaiUser

@inject UserManager<TUser> _UserManager
@inject IEmailSender<TUser> _EmailSender
@inject NavigationManager _NavigationManager
@inject IdentityRedirectManager _RedirectManager

<EditForm Model="_Input" FormName="forgot-password" OnValidSubmit="OnValidSubmitAsync" method="post">
    <DataAnnotationsValidator/>
    <FluentValidationSummary class="text-danger" role="alert"/>
    
    <FluentTextField Name="Input.Email" @bind-Value="_Input.Email" AutoComplete="username" Required="true" Placeholder="name@example.com" Label="Email" Style="width: 100%;"/>
    <FluentValidationMessage For="() => _Input.Email" class="text-danger"/>

    <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" Style="width: 100%;">Reset password</FluentButton>
</EditForm>

@code {
    [Parameter]
    public bool ResetConfirmed { get; set; }
    [Parameter]
    public EventCallback<bool> ResetConfirmedChanged { get; set; }
    
    [SupplyParameterFromForm]
    private InputModel _Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await _UserManager.FindByEmailAsync(_Input.Email);
        if(user is null || !(await _UserManager.IsEmailConfirmedAsync(user)))
        {
            // Don't reveal that the user does not exist or is not confirmed
            ResetConfirmed = true;
        }

        // For more information on how to enable account confirmation and password reset please
        // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await _UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = _NavigationManager.GetUriWithQueryParameters(
        _NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
        new Dictionary<string, object?>
        {
            ["code"] = code
        });

        await _EmailSender.SendPasswordResetLinkAsync(user, _Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        ResetConfirmed = true;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }

}