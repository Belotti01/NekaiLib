@namespace Nekai.Razor
@inherits NekaiComponentBase

@typeparam T

<th id="@Id" class="@Class" style="@Style" aria-label="@AriaLabel">
    <span class="d-flex flex-row align-items-center">
        @ChildContent
        @if(SortBy is not null)
        {
            <NekaiButton Class="container" OnClick="@SortAsync">
                <MaterialIcon Alignment="VerticalAlignment.Bottom">@SortIcon</MaterialIcon>
            </NekaiButton>
        }

        @if(FilterBy is not null)
        {
            <NekaiDropDown OpenOnHover>
                <DropDownLabel>
                    <MaterialIcon Alignment="VerticalAlignment.Bottom">filter_alt</MaterialIcon>
                </DropDownLabel>
                <DropDownEntries>
                    <NekaiDropDownEntry>
                        <NekaiTextBox Placeholder="Filter..." ValueChanged="@FilterAsync"/>
                    </NekaiDropDownEntry>
                </DropDownEntries>
            </NekaiDropDown>
        }
    </span>
</th>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter]
    public Func<T, object>? SortBy { get; set; }
    [Parameter]
    public Func<T, string, bool>? FilterBy { get; set; }

    protected string SortIcon { get; set; } = "";
    
    [CascadingParameter(Name = "grid")]
    public NekaiDataGrid<T>? Grid { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // Check if this is still the currently sorted by column.
        if(Grid is not null && Grid.CurrentSorting != SortBy)
        {
            await UpdateSortingIconAsync(Sorting.None);
        }
    }

    protected async Task SortAsync()
    {
        if(Grid is null)
            return;
        
        var sortOrder = await Grid.SortByAsync(SortBy);
        await UpdateSortingIconAsync(sortOrder);
    }

    public async Task FilterAsync(string filter)
    {
        if(Grid is null || FilterBy is null)
            return;

        Grid.Filter = x => FilterBy(x, filter);
        await Grid.ShowPageAsync(1, Grid.PageSize);
    }

    public async Task UpdateSortingIconAsync(Sorting sortOrder)
    {
        if(SortBy is null)
        {
            // Not sortable = No icon.
            // The icon hasn't changed - don't redraw.
            return;
        }
        
        SortIcon = sortOrder.ToIcon();
        await InvokeAsync(StateHasChanged);
    }
}