@namespace Nekai.Blazor.Components

@inherits NekaiComponentBase
@implements IChildrenPositioningComponent

@code {
	// Padding
	[Parameter]
	public PaddingType Padding { get; set; } = PaddingType.None;
	[Parameter]
	public PaddingType XPadding { get; set; } = PaddingType.None;
	[Parameter]
	public PaddingType YPadding { get; set; } = PaddingType.None;
	[Parameter]
	public PositioningType ContentAlignment { get; set; } = PositioningType.None;
	[Parameter]
	public FlexType Flex { get; set; } = FlexType.None;
	[Parameter]
	public bool NoGutter { get; set; }

	private ClassBuilder? _classBuilder;

	protected override void OnInitialized()
	{
		_classBuilder = new();
		OnStyling(_classBuilder);
		// Custom classes should be able to override any other value, so ensure that the custom value is appended at the very end
		Class = _classBuilder
			.WithClass(Class)
			.Build();

		_classBuilder = null;
	}
	
	protected override void OnStyling(ClassBuilder classBuilder)
	{
		base.OnStyling(classBuilder);
		// Order is important. E.g.: XPadding and YPadding should take priority over the value assigned to Padding.
		// This being CSS, the last value assigned to a property will take priority.
		classBuilder
			.WithClass(Flex.ToCssClass())
			.WithPadding(Padding, Dimension.All)
			.WithPadding(XPadding, Dimension.X)
			.WithPadding(YPadding, Dimension.Y)
			.WithNoGutter(NoGutter)
			.WithJustifyContent(ContentAlignment)
			.WithAlignItems(ContentAlignment);
	}
}
