using System.Diagnostics;

namespace Nekai.Common;

/// <summary>
/// <typeparamref name="TValue"/> values generator with tests implemented to run in DEBUG mode to ensure that only unique
/// values are generated by each instance.
/// </summary>
/// <typeparam name="TValue"> The type of the values to be generated. Must implement IEquatable (or be a <see langword="record"/> type). </typeparam>
public class UniqueValueGenerator<TValue>
	where TValue : IEquatable<TValue>
{
	private const int _TEST_ITERATIONS = 500;

	/// <summary>
	/// Functions defining the generation of each ID, based on the last generated value (taken as parameter)
	/// </summary>
	protected readonly Func<TValue?, TValue> _generator;

	private TValue? _lastValue;

	/// <summary>
	/// Create a new ID generator based on the <paramref name="generator"/> function, which takes the
	/// last generated ID as parameter to return a new unique value.
	/// </summary>
	/// <param name="generator">The ID generation function.</param>
	/// <param name="startIdValue">The first value sent to the <paramref name="generator"/> upon invoking the
	/// <see cref="Next"/> method.</param>
	public UniqueValueGenerator(Func<TValue?, TValue> generator, TValue? startIdValue = default)
	{
		_generator = generator;
		_lastValue = startIdValue;
		_TestIdGenerator();
	}

	public UniqueValueGenerator(Func<TValue> generator, TValue? startIdValue = default)
		: this(x => generator(), startIdValue)
	{
	}

	/// <summary>
	/// Generate a new ID but don't update the state of the generator.
	/// </summary>
	/// <returns>An ID value that can be generated at the next call of <see cref="Next"/>.</returns>
	public TValue Peek() => _generator(_lastValue);

	/// <summary>
	/// Generate a new ID.
	/// </summary>
	public TValue Next()
	{
		lock(this)
		{
			_lastValue = _generator(_lastValue);
			return _lastValue;
		}
	}

	[Conditional("DEBUG")]
	private void _TestIdGenerator()
	{
		HashSet<TValue> ids = new(_TEST_ITERATIONS);
		TValue? lastTestId = _lastValue;

		// Avoid using this.Next() for the tests, as it would change the _lastId value.
		// Peek() allows duplicate IDs to be generated, so don't use that for testing either
		for(int i = 0; i < _TEST_ITERATIONS; ++i)
		{
			lastTestId = _generator(lastTestId);
			Debug.Assert(lastTestId is not null, $"{nameof(UniqueValueGenerator<TValue>)} generated a null value.");
			Debug.Assert(ids.Add(lastTestId), $"{nameof(UniqueValueGenerator<TValue>)} does not consistently generate unique ids.");
		}
	}
}